//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : StateMachine.sm
//

#ifndef STATEMACHINE_SM_H
#define STATEMACHINE_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>
#include <rm_msgs/DbusData.h>

// Forward declarations.
class StateMachineMap;
class StateMachineMap_Idle;
class StateMachineMap_Aim;
class StateMachineMap_Ready;
class StateMachineMap_Push;
class StateMachineMap_Back;
class StateMachineMap_Default;
class StateMachineState;
class StateMachineContext;
class StateMachine;

class StateMachineState :
    public statemap::State
{
public:

    StateMachineState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(StateMachineContext&) {};
    virtual void Exit(StateMachineContext&) {};

    virtual void dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_);

protected:

    virtual void Default(StateMachineContext& context);
};

class StateMachineMap
{
public:

    static StateMachineMap_Idle Idle;
    static StateMachineMap_Aim Aim;
    static StateMachineMap_Ready Ready;
    static StateMachineMap_Push Push;
    static StateMachineMap_Back Back;
};

class StateMachineMap_Default :
    public StateMachineState
{
public:

    StateMachineMap_Default(const char * const name, const int stateId)
    : StateMachineState(name, stateId)
    {};

};

class StateMachineMap_Idle :
    public StateMachineMap_Default
{
public:
    StateMachineMap_Idle(const char * const name, const int stateId)
    : StateMachineMap_Default(name, stateId)
    {};

    virtual void dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_);
};

class StateMachineMap_Aim :
    public StateMachineMap_Default
{
public:
    StateMachineMap_Aim(const char * const name, const int stateId)
    : StateMachineMap_Default(name, stateId)
    {};

    virtual void Entry(StateMachineContext&);
    virtual void dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_);
};

class StateMachineMap_Ready :
    public StateMachineMap_Default
{
public:
    StateMachineMap_Ready(const char * const name, const int stateId)
    : StateMachineMap_Default(name, stateId)
    {};

    virtual void Entry(StateMachineContext&);
    virtual void dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_);
};

class StateMachineMap_Push :
    public StateMachineMap_Default
{
public:
    StateMachineMap_Push(const char * const name, const int stateId)
    : StateMachineMap_Default(name, stateId)
    {};

    virtual void Entry(StateMachineContext&);
    virtual void dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_);
};

class StateMachineMap_Back :
    public StateMachineMap_Default
{
public:
    StateMachineMap_Back(const char * const name, const int stateId)
    : StateMachineMap_Default(name, stateId)
    {};

    virtual void Entry(StateMachineContext&);
    virtual void dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_);
};

class StateMachineContext :
    public statemap::FSMContext
{
public:

    explicit StateMachineContext(StateMachine& owner)
    : FSMContext(StateMachineMap::Idle),
      _owner(owner)
    {};

    StateMachineContext(StateMachine& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline StateMachine& getOwner()
    {
        return (_owner);
    };

    inline StateMachineState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<StateMachineState&>(*_state);
    };

    inline void dbusUpdate(rm_msgs::DbusData data_dbus_)
    {
        getState().dbusUpdate(*this, data_dbus_);
    };

private:
    StateMachine& _owner;
};


#endif // STATEMACHINE_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
